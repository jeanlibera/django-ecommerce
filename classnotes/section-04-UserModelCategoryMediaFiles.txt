------------------------------------------------------
Django Ecommerce
Section 4 - Django Custom User Model, Category & Media Files
------------------------------------------------------

16. Category Model
------------------
apps suggestion: category, product, and order
also, a store app.

To create a category app:
python manage.py startapp category

In settings.py, add the app to INSTALLED_APPS
INSTALLED_APPS = [
	...
	'category',
]

In category\admin.py, add Category:
admin.site.register(Category)

To log into the admin site, we need to create a superuser.

python manage.py createsuperuser
Username: jean
Email address: jeanlibera@gmail.com
Password: Test1234!

By default, django adds an "s" to each model name, so you will see "Categorys",
which is incorrect. To fix this:

To fix this, add to the model:

class Category(models.Model):
    category_name = models.CharField(max_length=50, unique=True)
    slug = models.CharField(max_length=100, unique=True)
    description = models.CharField(max_length=255)
    cat_image = models.ImageField(upload_to='photos/categories', blank=True)

    class Meta:
        verbose_name = 'category'
        verbose_name_plural = 'categories'

(And then run migrations, since the model changed.)

17. & 18. Custom User Model
---------------------
Django uses a username and password for its authentication system
But most people want to use their email as their username, and enter
the email on the login page.

So we are going to create a custom user model. We will be using add
django model, but we will be overriding certain things.

We are going to create an accounts app:
python manage.py startapp accounts

Add it to INSTALLED_APPS in settings.py:
INSTALLED_APPS = [
	...
	'accounts'
]

Add code in models.py
(Account & MyAccountManager)
It's similar to https://docs.djangoproject.com/en/4.1/topics/auth/customizing/
(In the section "A full example")

In models.py, we are adding 
class Account(AbstractBaseUser)

The Account class uses a helper class:
class MyAccountManager(BaseUserManager):

For a simpler example of how to define a model class with a custom manager:
----- Simple example -----
See: https://docs.djangoproject.com/en/4.1/ref/models/instances/

class BookManager(models.Manager):
    def create_book(self, title):
        book = self.create(title=title)
        # do something with the book
        return book

class Book(models.Model):
    title = models.CharField(max_length=100)

    objects = BookManager()

book = Book.objects.create_book("Pride and Prejudice")
----- End simple example -----

The standard User object in django is documented here:
https://docs.djangoproject.com/en/4.1/ref/contrib/auth/
It's in the class django.contrib.auth.
The only field which we added was phone_number

Add a line in admin.py:

from .models import Account
admin.site.register(Account)

Add this to settings.py:
AUTH_USER_MODEL = 'accounts.Account'

Then delete the database, and the 2 migrations in the category app.
To regenerate the database, 
python manage.py runserver

We get an error, but that's expected. What's important is,
it created a new database (db.sqlite3).

Stop the server and create new migrations.
python manage.py makemigrations
python manage.py migrate

Then create a new superuser
python manage.py createsuperuser

19. Making the Custom Password Field Read-only
----------------------------------------------
Add code to admin.py:

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin

from .models import Account

class AccountAdmin(UserAdmin):
    list_display = ('email', 'first_name', 'last_name', 'username', 'last_login', 'date_joined', 'is_active')
    # create a link on first_name and last_name
    list_display_links = ('email', 'first_name', 'last_name')
    readonly_fields = ('last_login', 'date_joined')
    # order entries by date_joined in descending order
    ordering = ('-date_joined',)

    filter_horizontal = ()
    list_filter = ()
    # don't allow the user specify read-only fields
    fieldsets = ()

admin.site.register(Account, AccountAdmin)

20. Configuring Django Media Files
----------------------------------
We need to configure media files.
You can add the categories manually.

Category name  Slug    Description                          Cart image
Shirts         shirts  This is the demo shirt category      shirts.jpg

21. Pre-populate Category Slug
------------------------------
In models.py, for the Category class, change:
    slug = models.CharField(max_length=100, unique=True)
to:
    slug = models.SlugField(max_length=100, unique=True)

22. Install SQLite Studio
-------------------------
Instead of DBBrowser for SQLite, he used 
SQLiteStudio
	
	
