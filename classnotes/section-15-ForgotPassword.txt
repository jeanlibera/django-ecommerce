------------------------------------------------------
Django Ecommerce
Section 15 - Forgot Password with
             Secure Validation Links
------------------------------------------------------

71. Forgot Password
-------------------
The function we are using in views.py, forgot_password(),
will send the user an email with a link to click, to reset the password.
It's similar to the email where we were verifying the user account.
The link has an encoded user id and a token.

In forgot_password(), we need to check if the user corresponds to an existing account:
We are using a filter with a case-insensitive exact match for email.

def forgot_password(request: HttpRequest):
    print("Starting forgot_password request handler")
    if request.method == 'POST':
        print("The method is POST")
        email = request.POST['email']
        if Account.objects.filter(email__iexact=email).exists():
            user = Account.objects.get(email__iexact=email)

The link the user clicks on directs them to 'reset_password_validate_action'
which currently maps to this function in views.py:
def reset_password_validate(request:HttpRequest, uidb64, token)

One interesting thing they do in reset_password_validate(), is get the user like this:
	uid = urlsafe_base64_decode(uidb64)
    # returns the same result as Account.objects.get(id=uid)
    user = Account._default_manager.get(pk=uid)
	
All these statements produce the same result:
  user = Account._default_manager.get(pk=uid)
  user = Account.objects.get(id=uid)
  user = Account.objects.get(pk=uid)
  
Here is documentation about _default_manager:
https://docs.djangoproject.com/en/4.1/topics/db/managers/#default-managers
  
72. Reset Password Validation
-----------------------------
First, get the uid and user
Then, save the uid inside the session, so that it can be used later,
when resetting the password.
Here is a simplified view of the validate function:

def reset_password_validate(request:HttpRequest, uidb64, token):
    uid = urlsafe_base64_decode(uidb64).decode()
    user = Account._default_manager.get(pk=uid)
    request.session['uid'] = uid
    return redirect('reset_password_page')

In the reset password request handler, there are at least 2 ways to get the uid:
	uid = request.session['uid']
	uid = request.session.get('uid')
	
Then you retrieve the user object. To change the password, you have to use:
    user.set_password(password)
set_password saves the password in the correct hashed format.
	
If we go to the reset_password_page directly, it won't reset your password,
because the uid is not saved in the session.

Once you have actually used the link in the email to reset your password,
it doesn't work anymore. I used the email link many times before resetting
the password, and it worked. But after resetting the password, the token
doesn't work. The reason is, the django method to create the token uses a
hash, and the hash value includes the username and the password (and more).
So if you change the password, it won't match anymore.

Here is the function which actually changes the password.

def reset_password(request: HttpRequest):
    print(f"Starting reset_password request handler")
    uid = request.session.get('uid')
    print(f"The user id is {uid}")

    if request.method == "POST":
        password = request.POST["password"]
        confirm_password = request.POST["confirm_password"]
        if password == confirm_password:
            user: Account = Account.objects.get(pk=uid)
            user.set_password(password)
            user.save()
            print(f"The password was reset for uid {uid}")
            messages.success(request, "The password was reset")
            return redirect('login_page')
        else:
            messages.error(request, "Passwords do not match")
            return redirect('reset_password_page')

    else: # GET
        return render(request, 'accounts/reset_password.html')